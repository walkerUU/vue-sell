@mixin border-1px($color:#ccc, $radius:2PX, $style:solid){
  position: relative;
  &::after{
    content: "";
    pointer-events: none;
    display: block;
    position: absolute;
    left: 0;
    top: 0;
    transform-origin: 0 0;
    border: 1PX $style $color;
    border-radius: $radius;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    @media (min-resolution: 2dppx){
      width: 200%;
      height: 200%;
      border-radius: $radius * 2;
      transform: scale(.5);
    }
    @media (min-resolution: 3dppx){
      width: 300%;
      height: 300%;
      border-radius: $radius * 3;
      transform: scale(.333);
    }
  }
}

@mixin border-none(){
  &::before
    {display: none;}
  &::after
    {display: none;}
}

@mixin flex-fix(){
  flex: 1;
  flex-basis: 0.000000001px;
  width: 1%;
}

@mixin touch-active($type:orange) {
  @if $type == orange{
    &:active{
      color: #fcc1a6;
      background-color: rgba(250, 143, 84, .04);
    }
  } 
  @else {
    &:active{
      color: #c6c6c6;
      background-color: rgba(0, 0, 0, .04);
    }
  }
}


@mixin hide-scrollbar(){
  &::-webkit-scrollbar{
    width: 0;
    height: 0;
  }
}

@mixin bg-image($imgName, $ext:".png"){
  background-image: url($imgName + "@2x" + $ext);
  @media (min-resolution: 3dppx){
    background-image: url($imgName + "@3x" + $ext);
  }
}

@mixin flex-center($direction:row) {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: $direction;
}

@mixin flex-between() {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

// 单行省略
@mixin ellipsis() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// 多行省略
@mixin multiline-ellipsis($num:2) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $num;
  -webkit-box-orient: vertical;
  white-space: nowrap !important;
  word-wrap: break-word;
}

// iphoneX 适配
// $functions: constant env;
// @function safe-area-fn($fn, $position){
//   @return s("%s(safe-area-inset-%s)", $fn, $position);
// }
// @function safe-area-mixin($property, $position, $important:false){
//   @each $fn in $functions{
//     @return #{$property}: safe-area-fn($fn, $position), $important == true ? !$important : unquote("");
//   }
// }

// functions = constant env
// safe-area-fn(fn, position)
//   s("%s(safe-area-inset-%s)", fn, position)
// safe-area-mixin(property, position, important = false)
//   for fn in functions
//     {property} safe-area-fn(fn, position) important == true ? !important : unquote("")
